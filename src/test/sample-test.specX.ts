import {HeaderParser} from '../lib/HeaderParser';
import {ColumnsParser} from '../lib/ColumnsParser';
import {RecordsParser} from '../lib/RecordsParser';
import {BufferReader} from '../lib/BufferReader';
import {assert} from 'chai';

describe('header parser', () => {
  it('should parse header', async (done) => {
    try {
      let headerBytesString = "8B 74 05 02 2F D8 0A 00 E1 03 C6 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00".replace(/ /g,"");
      let buffer = Buffer.from(headerBytesString, "hex");
      let parser = new HeaderParser(buffer);
      let parsed = parser.parse();
      
      console.log(parsed);
      
      done();
    } catch (error) {
      done(error);
    }
  });
});

describe('columns parser', () => {
  it('should parse columns', async (done) => {
    try {
      let headerBytesString = "49 44 45 4E 54 00 00 00 00 00 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 52 44 41 54 41 00 00 00 00 00 00 43 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 52 43 5A 41 53 00 00 00 00 00 00 43 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 44 41 54 41 00 00 00 00 00 00 43 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 43 5A 41 53 00 00 00 00 00 00 43 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 57 44 41 54 41 00 00 00 00 00 00 43 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 57 43 5A 41 53 00 00 00 00 00 00 43 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 5A 44 41 54 41 00 00 00 00 00 00 43 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 5A 43 5A 41 53 00 00 00 00 00 00 43 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 41 43 4A 45 4E 54 00 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 45 53 45 4C 00 00 00 00 00 00 43 00 00 00 00 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4E 52 5F 52 45 4A 45 53 54 52 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4E 52 5F 4B 53 49 45 47 49 00 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 52 5A 59 43 48 00 00 00 00 00 43 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 45 4B 41 52 5A 00 00 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 4E 41 4C 49 54 59 4B 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 4F 42 52 41 4E 49 45 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 52 45 4A 45 53 54 52 00 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4B 4F 4E 54 52 4F 4C 45 52 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 4E 41 4C 49 5A 41 00 00 00 00 43 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 47 52 55 50 41 42 41 44 41 4E 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 57 59 4E 49 4B 00 00 00 00 00 00 43 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4A 45 44 4E 00 00 00 00 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 52 45 46 45 52 00 00 00 00 00 00 43 00 00 00 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 57 41 47 49 00 00 00 00 00 00 4D 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4B 4F 4D 45 4E 54 41 52 5A 00 00 4D 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 53 54 41 54 55 53 00 00 00 00 00 43 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 53 4F 50 00 00 00 00 00 00 00 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 4F 42 52 5F 5A 45 57 4E 00 00 43 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 4B 00 00 00 00 00 00 00 00 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0D".replace(/ /g,"");
      let buffer = Buffer.from(headerBytesString, "hex");
      let parser = new ColumnsParser(buffer, '850');
      let parsed = parser.parse();
      
      console.log(parsed);
      
      done();
    } catch (error) {
      done(error);
    }
  });
});

describe('records parser', () => {
  it('should parse records', async (done) => {
    try {
      let headerBytesString = "49 44 45 4E 54 00 00 00 00 00 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 52 44 41 54 41 00 00 00 00 00 00 43 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 52 43 5A 41 53 00 00 00 00 00 00 43 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 44 41 54 41 00 00 00 00 00 00 43 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 43 5A 41 53 00 00 00 00 00 00 43 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 57 44 41 54 41 00 00 00 00 00 00 43 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 57 43 5A 41 53 00 00 00 00 00 00 43 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 5A 44 41 54 41 00 00 00 00 00 00 43 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 5A 43 5A 41 53 00 00 00 00 00 00 43 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 41 43 4A 45 4E 54 00 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 45 53 45 4C 00 00 00 00 00 00 43 00 00 00 00 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4E 52 5F 52 45 4A 45 53 54 52 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4E 52 5F 4B 53 49 45 47 49 00 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 52 5A 59 43 48 00 00 00 00 00 43 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 45 4B 41 52 5A 00 00 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 4E 41 4C 49 54 59 4B 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 4F 42 52 41 4E 49 45 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 52 45 4A 45 53 54 52 00 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4B 4F 4E 54 52 4F 4C 45 52 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 4E 41 4C 49 5A 41 00 00 00 00 43 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 47 52 55 50 41 42 41 44 41 4E 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 57 59 4E 49 4B 00 00 00 00 00 00 43 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4A 45 44 4E 00 00 00 00 00 00 00 43 00 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 52 45 46 45 52 00 00 00 00 00 00 43 00 00 00 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 57 41 47 49 00 00 00 00 00 00 4D 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4B 4F 4D 45 4E 54 41 52 5A 00 00 4D 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 53 54 41 54 55 53 00 00 00 00 00 43 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 53 4F 50 00 00 00 00 00 00 00 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 4F 42 52 5F 5A 45 57 4E 00 00 43 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 4B 00 00 00 00 00 00 00 00 00 43 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0D".replace(/ /g,"");
      let buffer = Buffer.from(headerBytesString, "hex");
      let parser = new ColumnsParser(buffer, '850');
      let parsed = parser.parse();
      
      let recordsBytesString = "20 34 33 33 33 39 30 38 20 20 20 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 33 3A 32 30 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 33 3A 30 30 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 34 3A 30 34 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 37 3A 32 34 20 20 46 55 4B 53 20 4A 4F 41 4E 4E 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 31 30 32 37 32 30 30 36 33 34 31 31 30 38 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 34 34 5A 4C 45 43 45 4E 49 45 20 50 41 43 4A 45 4E 54 41 20 20 20 5A 4C 45 43 45 4E 49 45 20 50 41 43 4A 45 4E 54 41 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 57 42 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 4D 4F 52 46 4F 4C 4F 47 49 41 20 33 2D 44 49 46 46 20 20 20 20 20 20 20 20 20 20 20 20 20 36 2C 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 31 30 3C 73 75 70 3E 33 3C 2F 73 75 70 3E 2F 26 6D 69 63 72 6F 3B 6C 20 20 20 20 20 20 20 35 2D 31 39 2C 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 2B 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 30 20 32 36 31 20 20 20 20 20 20 20 20 20 34 33 33 33 39 30 39 20 20 20 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 33 3A 32 30 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 33 3A 30 30 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 34 3A 30 39 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 37 3A 32 34 20 20 46 55 4B 53 20 4A 4F 41 4E 4E 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 31 30 32 37 32 30 30 36 33 34 31 31 30 38 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 34 33 5A 4C 45 43 45 4E 49 45 20 50 41 43 4A 45 4E 54 41 20 20 20 5A 4C 45 43 45 4E 49 45 20 50 41 43 4A 45 4E 54 41 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 48 47 42 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 4D 4F 52 46 4F 4C 4F 47 49 41 20 33 2D 44 49 46 46 20 20 20 20 20 20 20 20 20 20 20 20 20 31 31 2C 38 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 67 2F 64 6C 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 31 30 2C 31 2D 31 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 2B 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 30 20 36 35 20 20 20 20 20 20 20 20 20 20 34 33 33 33 39 31 30 20 20 20 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 33 3A 32 30 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 33 3A 30 30 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 34 3A 31 35 20 20 32 30 31 31 30 33 32 35 31 34 3A 32 37 3A 32 34 20 20 46 55 4B 53 20 4A 4F 41 4E 4E 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 31 30 32 37 32 30 30 36 33 34 31 31 30 38 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 34 32 5A 4C 45 43 45 4E 49 45 20 50 41 43 4A 45 4E 54 41 20 20 20 5A 4C 45 43 45 4E 49 45 20 50 41 43 4A 45 4E 54 41 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 4B 72 79 73 74 79 6E 61 20 43 69 62 6F 72 73 6B 61 20 20 20 20 20 20 20 20 20 20 20 20 20 52 42 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 4D 4F 52 46 4F 4C 4F 47 49 41 20 33 2D 44 49 46 46 20 20 20 20 20 20 20 20 20 20 20 20 20 34 2C 33 38 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 31 30 3C 73 75 70 3E 36 3C 2F 73 75 70 3E 2F 26 6D 69 63 72 6F 3B 6C 20 20 20 20 20 20 20 33 2C 39 2D 35 2C 31 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 2B 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 30 20 37 33 35 20 20 20 20 20 20 20 20 20".replace(/ /g,"");
      
      let recordsBuffer = Buffer.from(recordsBytesString, "hex");
      let recordsReader = new BufferReader(recordsBuffer);
      let recordsParser = new RecordsParser(recordsReader, parsed, '850');
      let parsedRecords = recordsParser.parse();
      
      console.log(parsedRecords);
      
      done();
    } catch (error) {
      done(error);
    }
  });
});
